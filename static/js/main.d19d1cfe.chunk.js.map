{"version":3,"sources":["robot.js","card.js","cardlist.js","searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Robots","id","name","profession","age","Card","props","className","alt","src","Cardlist","map","user","i","Searchbox","searchchange","type","placeholder","onChange","App","onsearchchange","event","setState","searchfield","target","value","state","filteredrobots","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAAaA,EAAS,CAClB,CACIC,GAAI,EACJC,KAAM,gBACNC,WAAY,qBACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,eACNC,WAAY,eACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,iBACNC,WAAY,eACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,gBACNC,WAAY,iBACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,gBACNC,WAAY,eACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,gBACNC,WAAY,SACZC,IAAK,IAIT,CACIH,GAAI,EACJC,KAAM,iBACNC,WAAY,YACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,mBACNC,WAAY,aACZC,IAAK,IAGT,CACIH,GAAI,GACJC,KAAM,mBACNC,WAAY,cACZC,IAAK,IAGT,CACIH,GAAI,EACJC,KAAM,qBACNC,WAAY,mBACZC,IAAK,KCtDEC,EAbF,SAACC,GACV,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,QAAQC,IAAK,6CACtB,6BACI,gCAAMH,EAAMJ,KAAZ,KACA,+BAAKI,EAAMH,WAAX,KACA,+BAAKG,EAAMF,IAAX,QCkBDM,EArBE,SAAC,GAAgB,IAAdV,EAAa,EAAbA,OAChB,OACI,6BAGQA,EAAOW,KAAI,SAACC,EAAMC,GAEd,OACA,kBAAC,EAAD,CACIX,KAAMF,EAAOa,GAAGX,KAChBC,WAAYH,EAAOa,GAAGV,WACtBC,IAAKJ,EAAOa,GAAGT,WCJxBU,G,MAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKR,UAAW,OACb,2BACKA,UAAU,mCACVS,KAAK,SACLC,YAAY,uBACZC,SAAUH,OCkCXI,E,kDAjCX,aAAe,IAAD,8BACV,gBAQJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAR1C,EAAKC,MACL,CACI1B,OAAQA,EACRuB,YAAa,IALP,E,qDAaJ,IAAD,OACCI,EAAiBC,KAAKF,MAAM1B,OAAO6B,QAAO,SAAA7B,GAC5C,OAAOA,EAAOE,KAAK4B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAErE,OACA,yBAAKvB,UAAU,MACP,wBAAIA,UAAU,MAAd,iBACA,2BAAG,kBAAC,EAAD,CAAWQ,aAAca,KAAKR,kBACjC,6BACI,kBAAC,EAAD,CAAUpB,OAAQ2B,U,GAvBpBK,IAAMC,W,MCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d19d1cfe.chunk.js","sourcesContent":["export const Robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Foster Ogwudu',\r\n        profession: 'Software Developer',\r\n        age: 28\r\n        \r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Frank Ogwudu',\r\n        profession: 'Radiographer',\r\n        age: 32\r\n\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Francis Ogwudu',\r\n        profession: 'Radiographer',\r\n        age: 26\r\n\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Vivian Ogwudu',\r\n        profession: 'Crop Scientist',\r\n        age: 31\r\n\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Thelma Ogwudu',\r\n        profession: 'Radiographer',\r\n        age: 20\r\n\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Favour Ogwudu',\r\n        profession: 'Doctor',\r\n        age: 28\r\n\r\n    },\r\n   \r\n    {\r\n        id: 8,\r\n        name: 'Collins Ogwudu',\r\n        profession: 'Geologist',\r\n        age: 28\r\n\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Christian Ogwudu',\r\n        profession: 'Accountant',\r\n        age: 28\r\n\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Ugochukwu Ogwudu',\r\n        profession: 'Businessman',\r\n        age: 28\r\n\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Queendaline Ogwudu',\r\n        profession: 'Biologist / CEO ',\r\n        age: 26\r\n\r\n    },\r\n]","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 p3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={'https://robohash.org/${probs.id}?200x200'} />\r\n            <div>\r\n                <h2> {props.name} </h2>\r\n                <p> {props.profession} </p>\r\n                <p> {props.age} </p>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport { Robots } from './robot.js';\r\nimport Card from './card.js';\r\n\r\n\r\n\r\nconst Cardlist = ({ Robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n\r\n                Robots.map((user, i) =>\r\n                {\r\n                    return (\r\n                    <Card\r\n                        name={Robots[i].name}\r\n                        profession={Robots[i].profession}\r\n                        age={Robots[i].age}\r\n                        />\r\n                        )\r\n                })\r\n             }\r\n        \r\n        </div>\r\n\r\n        );\r\n}\r\nexport default Cardlist\r\n    ","import React from 'react';\r\nconst Searchbox = ({searchchange}) => {\r\n    return (\r\n        <div className= 'pa2'>\r\n           <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search Ogwudu Family'\r\n                onChange={searchchange}\r\n           />\r\n        </div> \r\n    );\r\n}\r\nexport default Searchbox;","import React from 'react';\nimport Cardlist from './cardlist.js';\nimport './App.css';\nimport Searchbox from './searchbox.js';\nimport {Robots} from './robot.js';\n\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\r\n        this.state =\r\n        {\r\n            Robots: Robots,\r\n            searchfield: ''\r\n        }\r\n    }\n\n    onsearchchange = (event) => {\n        this.setState({ searchfield: event.target.value })\r\n   }\n    \n    render() {\n        const filteredrobots = this.state.Robots.filter(Robots => {\n            return Robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\n        return (\r\n        <div className='tc'>\r\n                <h1 className='tc' >OGWUDU FAMILY</h1>\r\n                <p><Searchbox searchchange={this.onsearchchange} /></p>\r\n                <div>\r\n                    <Cardlist Robots={filteredrobots} />\r\n            </div>\r\n        </div>\r\n\r\n        );\n\r\n    }\n    \r\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Card from './card.js';\nimport 'tachyons';\nimport { Robots } from './robot.js';\nimport Cardlist from './cardlist.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    \n    <App/>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}